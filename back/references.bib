@book{IEEE-1363,
  author =       {{IEEE Std 1363-2000}},
  title =        {{IEEE} Standard Specifications for Public-Key Cryptography},
  address =      {New York},
  publisher =    {IEEE},
  year =         2000
}

@inproceedings{kocher99,
  author =       {C. Kocher and J. Jaffe and B. Jun},
  title =        {Differential Power Analysis},
  editor =       {M. Wiener},
  booktitle =    {Advances in Cryptology ({CRYPTO}~'99)},
  series =       {Lecture Notes in Computer Science},
  volume =       1666,
  pages =        {388-397},
  publisher =    {Springer-Verlag},
  month =        {August},
  year =         1999
}

@incollection{Krasnogor2004e,
  author =       {N. Krasnogor},
  title =        {Towards robust memetic algorithms},
  booktitle =    {Recent Advances in Memetic Algorithms},
  publisher =    {Springer Berlin Heidelberg},
  year =         2004,
  pages =        {185-207},
  editor =       {W.E. Hart and N. Krasnogor and J.E. Smith},
  volume =       166,
  series =       {Studies in Fuzziness and Soft Computing},
  address =      {New York},
}

@incollection{zjsw,
  author =       {班固},
  title =        {苏武传},
  booktitle =    {传记散文英华},
  publisher =    {湖北人民出版社},
  year =         1998,
  pages =        {65-69},
  editor =       {郑在瀛 and 汪超宏 and 周文复},
  volume =       2,
  series =       {新古文观止丛书},
  address =      {武汉},
  language =     "chinese",
}

@inbook{clzs,
  author =       {阎真},
  title =        {沧浪之水},
  chapter =      {大人物还是讲人情的},
  pages =        {185-207},
  publisher =    {人民文学出版社},
  year =         2001,
  language =     "chinese",
}

@book{tex,
  author =       "Donald E. Knuth",
  title =        "The {\TeX} Book",
  publisher =    "Addison-Wesley Publishing Company",
  address =      "Reading, MA",
  year =         1989,
  edition =      "15th",
}

@book{companion,
  author =       "Michel Goosens and Frank Mittelbach and Alexander Samarin",
  title =        "The {\LaTeX} Companion",
  publisher =    "Addison-Wesley Publishing Company",
  address =      "Reading, MA",
  PAGES =        "112--125",
  year =         1994,
}

@article{ELIDRISSI94,
  author =       "{Chafik El Idrissi}, M. and {Roney}, A. and {Frigon}, C. and
                  {Larzilli{\`e}re}, M.",
  title =        "Measurements of total kinetic-energy released to the {$N=2$}
                  dissociation limit of {H}$_2$ --- evidence of the dissociation
                  of very high vibrational {R}ydberg states of {H}$_2$ by
                  doubly-excited states",
  journal =      "Chemical Physics Letters",
  pages =        "260-266",
  volume =       224,
  number =       10,
  year =         1994,
}

@article{MELLINGER96,
  author =       "Mellinger, A. and Vidal, C. R. and Jungen, Ch.",
  title =        "Laser reduced fluorescence study of the carbon-monoxide nd
                  triplet {R}ydberg series-experimental results and multichannel
                  quantum-defect analysis",
  journal =      "J. Chem. Phys.",
  pages =        "8913-8921",
  volume =       104,
  number =       5,
  year =         1996,
}

@article{SHELL02,
  author =       "Michael Shell",
  title =        "How to Use the {IEEEtran \LaTeX} Class",
  journal =      "Journal of {\LaTeX} Class Files",
  year =         2002,
  volume =       12,
  number =       4,
  pages =        "100--120"
}

@TechReport{NPB2,
  title =        {The {NAS} Parallel Benchmarks 2.0},
  author =       {Alex Woo and David Bailey and Maurice Yarrow and Wijngaart
                  Wijngaart and Tim Harris and William Saphir},
  year =         1995,
  month =        dec # "~05",
  institution =  "The Pennsylvania State University CiteSeer Archives",
  url =          "http://www.nasa.org/"
}

@inproceedings{DPMG,
  author =       {Kim, Sangbum and Woo, Namyoon and Yeom, Heon Y. and Park,
                  Taesoon and Park, Hyoungwoo},
  title =        {Design and {I}mplementation of {D}ynamic {P}rocess
                  {M}anagement for {G}rid-enabled {MPICH}},
  booktitle =    {the 10th European PVM/MPI Users' Group Conference},
  year =         2003,
  address =      {Venice, Italy},
  month =        sep,
}

@inproceedings{cnproceed,
  author =       {王重阳 and 黄药师 and 欧阳峰 and 洪七公 and 段皇帝},
  title =        {武林高手从入门到精通},
  booktitle =    {第~$N$~次华山论剑},
  year =         2006,
  address =      {西安, 中国},
  month =        sep,
  language =     "chinese",
}

@article{cnarticle,
  author =       "贾宝玉 and 林黛玉 and 薛宝钗 and 贾探春",
  title =        "论刘姥姥食量大如牛之现实意义",
  journal =      "红楼梦杂谈",
  pages =        "260--266",
  volume =       224,
  year =         1800,
  language =     "chinese",
}

@mastersthesis{zhubajie,
  author =       {猪八戒},
  title =        {论流体食物的持久保存},
  school =       {广寒宫大学},
  year =         2005,
  address =      {北京},
  language =     "chinese",
}

@phdthesis{shaheshang,
  author =       {沙和尚},
  title =        {论流沙河的综合治理},
  school =       {清华大学},
  year =         2005,
  address =      {北京},
  language =     "chinese",
}

@mastersthesis{metamori2004,
  author =       {Ashwin Raju Jeyakumar},
  title =        {Metamori: A library for Incremental File Checkpointing},
  school =       {Virgina Tech},
  year =         2004,
  month =        jun # "~21",
  address =      {Blacksburg},
}

@phdthesis{FistSystem01,
  author =       "Erez Zadok",
  title =        "{FiST: A System for Stackable File System Code Generation}",
  year =         2001,
  month =        "May",
  school =       "Computer Science Department, Columbia University",
  address =      "USA"
}

@inbook{ColdSources,
  author =       {P. Gr{\"o}ning and L. Nilsson and P. Ruffieux and R.
                  Clergereaux and O. Gr{\"o}ning},
  title =        {Encyclopedia of Nanoscience and Nanotechnology},
  pages =        {547--579},
  publisher =    {American Scientific Publishers},
  year =         2004,
  volume =       1,
}

@online{chuban2001,
  author =      {萧钰},
  title =       {出版业信息化迈入快车道},
  modifydate =  {2001-12-19},
  citedate =    {2002-04-15},
  url =         {http://www.creader.com/news/200112190019.htm},
  language =    "chinese",
}

@online{oclc2000,
  author =      {{Online Computer Library Center, Inc.}},
  title =       {History of {OCLC}},
  citedate =    {2000-01-08},
  url =         {http://www.oclc.org/about/history/default.htm},
}


@online{thuthesis,
  author =      {薛瑞尼},
  title =       {\thuthesis: 清华大学学位论文模板},
  citedate =    {2017-12-02},
  url =         {https://github.com/xueruini/thuthesis},
  language =    "chinese",
  year =        2017,
}

@misc{hackbench,
  author = {Rusty Russell},
  title = {{Hackbench}},
  howpublished = {\url{http://people.redhat.com/mingo/cfs-scheduler/tools/hackbench.c}},
  year = 2008,
  month = jan,
}

@misc{netperf,
  title = {Netperf},
  author = {Rick Jones},
  howpublished = {\url{https://github.com/HewlettPackard/netperf}},
  year = 2018,
  month = jun
}

@misc{ab,
  author = {{The Apache Software Foundation}},
  title = {{ab - Apache HTTP server benchmarking tool}},
  howpublished = {\url{http://httpd.apache.org/docs/2.4/programs/ab.html}},
  year = 2015,
  month = apr,
}

@misc{memtier,
  author = {{Redis Labs}},
  title = {{memtier\_benchmark}},
  howpublished = {\url{https://github.com/RedisLabs/memtier_benchmark}},
  year = 2015,
  month = apr,
}

@misc{YCSB,
  author = {{Brian Cooper}},
  title = {{Yahoo! Cloud Serving Benchmark}},
  howpublished = {\url{https://github.com/brianfrankcooper/YCSB}},
  year = 2021,
  month = feb,
}

@misc{sekvm-artifact,
    author = {{Columbia University}},
    title = {{SOSP 21: Artifact Evaluation: Verifying a Multiprocessor Hypervisor on Arm Relaxed Memory Hardware}},
    howpublished = {\url{https://github.com/VeriGu/sosp-paper211-ae}},
    year = 2021,
    month = sep
}

@inproceedings{hypsec,
author = {Li, Shih-Wei and Koh, John S. and Nieh, Jason},
title = {Protecting Cloud Virtual Machines from Commodity Hypervisor and Host Operating System Exploits},
year = {2019},
isbn = {9781939133069},
publisher = {USENIX Association},
address = {USA},
abstract = {Hypervisors are widely deployed by cloud computing providers to support virtual machines, but their growing complexity poses a security risk as large codebases contain many vulnerabilities. We have created HypSec, a new hypervisor design for retrofitting an existing commodity hypervisor using microkernel principles to reduce its trusted computing base while protecting the confidentiality and integrity of virtual machines. HypSec partitions the hypervisor into an untrusted host that performs most complex hypervisor functionality without access to virtual machine data, and a trusted core that provides access control to virtual machine data and performs basic CPU and memory virtualization. Hardware virtualization support is used to isolate and protect the trusted core and execute it at a higher privilege level so it can mediate virtual machine exceptions and protect VM data in CPU and memory. HypSec takes an end-to-end approach to securing I/O to simplify its design, with applications increasingly using secure network connections in the cloud. We have used HypSec to retrofit KVM, showing how our approach can support a widely-used full-featured hypervisor integrated with a commodity operating system. The implementation has a trusted computing base of only a few thousand lines of code, many orders of magnitude less than KVM. We show that HypSec protects the confidentiality and integrity of virtual machines running unmodified guest operating systems while only incurring modest performance overhead for real application workloads.},
booktitle = {Proceedings of the 28th USENIX Conference on Security Symposium},
pages = {1357–1374},
numpages = {18},
location = {Santa Clara, CA, USA},
series = {SEC'19}
}

@inproceedings{ruststudy,
author = {Qin, Boqin and Chen, Yilun and Yu, Zeming and Song, Linhai and Zhang, Yiying},
title = {Understanding Memory and Thread Safety Practices and Issues in Real-World Rust Programs},
year = {2020},
isbn = {9781450376136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3385412.3386036},
doi = {10.1145/3385412.3386036},
abstract = {Rust is a young programming language designed for systems software development. It aims to provide safety guarantees like high-level languages and performance efficiency like low-level languages. The core design of Rust is a set of strict safety rules enforced by compile-time checking. To support more low-level controls, Rust allows programmers to bypass these compiler checks to write unsafe code. It is important to understand what safety issues exist in real Rust programs and how Rust safety mechanisms impact programming practices. We performed the first empirical study of Rust by close, manual inspection of 850 unsafe code usages and 170 bugs in five open-source Rust projects, five widely-used Rust libraries, two online security databases, and the Rust standard library. Our study answers three important questions: how and why do programmers write unsafe code, what memory-safety issues real Rust programs have, and what concurrency bugs Rust programmers make. Our study reveals interesting real-world Rust program behaviors and new issues Rust programmers make. Based on our study results, we propose several directions of building Rust bug detectors and built two static bug detectors, both of which revealed previously unknown bugs.},
booktitle = {Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {763–779},
numpages = {17},
keywords = {Bug Study, Memory Bug, Rust, Concurrency Bug},
location = {London, UK},
series = {PLDI 2020}
}

@inproceedings{lisosp21,
author = {Li, Dingji and Mi, Zeyu and Xia, Yubin and Zang, Binyu and Chen, Haibo and Guan, Haibing},
title = {TwinVisor: Hardware-Isolated Confidential Virtual Machines for ARM},
year = {2021},
isbn = {9781450387095},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3477132.3483554},
doi = {10.1145/3477132.3483554},
booktitle = {Proceedings of the ACM SIGOPS 28th Symposium on Operating Systems Principles},
pages = {638–654},
numpages = {17},
keywords = {Confidential Computing, ARM TrustZone, Virtualization, Cloud Computing},
location = {Virtual Event, Germany},
series = {SOSP '21}
}

@inproceedings{zhang2011cloudvisor,
  author = {Fengzhe Zhang and Jin Chen and Haibo Chen and Binyu Zang},
  title = {{CloudVisor: Retrofitting Protection of Virtual Machines in Multi-tenant Cloud with Nested Virtualization}},
  booktitle = {Proceedings of the 23rd ACM Symposium on Operating Systems
  Principles (SOSP 2011)},
  year = {2011},
  month = oct,
  isbn = {978-1-4503-0977-6},
  address = {Cascais, Portugal},
  pages = {203--216},
  numpages = {14},
}

@inproceedings {zeyu20usenix,
author = {Zeyu Mi and Dingji Li and Haibo Chen and Binyu Zang and Haibing Guan},
title = {(Mostly) Exitless {VM} Protection from Untrusted Hypervisor through Disaggregated Nested Virtualization},
booktitle = {29th USENIX Security Symposium (USENIX Security 20)},
year = {2020},
isbn = {978-1-939133-17-5},
pages = {1695--1712},
url = {https://www.usenix.org/conference/usenixsecurity20/presentation/mi},
publisher = {USENIX Association},
month = aug,
}

@inproceedings{fidelius-hpca18,
  author={Wu, Yuming and Liu, Yutao and Liu, Ruifeng and Chen, Haibo and Zang, Binyu and Guan, Haibing},
  booktitle={2018 IEEE International Symposium on High Performance Computer Architecture (HPCA)},
  title={Comprehensive VM Protection Against Untrusted Hypervisor Through Retrofitted AMD Memory Encryption},
  year={2018},
  volume={},
  number={},
  pages={441-453},
  doi={10.1109/HPCA.2018.00045}
}

@inproceedings{sekvm,
author = {Li, Shih-Wei and Li, Xupeng and Gu, Ronghui and Nieh, Jason and Zhuang Hui, John},
booktitle = {2021 IEEE Symposium on Security and Privacy (SP)},
title = {A Secure and Formally Verified Linux KVM Hypervisor},
year = {2021},
volume = {},
number = {},
pages = {1782-1799},
doi = {10.1109/SP40001.2021.00049}
}

@misc{pkvm,
  title = {{KVM for Android}},
  year = {2020},
  month = nov,
  organization = {{LWN.net}},
  author = {{Jake Edge}},
  note = {\url{https://lwn.net/Articles/836693/}},
}

@inproceedings{kivity07kvm,
 author = {Avi Kivity and Yaniv Kamay and Dor Laor and Uri Lublin and Anthony Liguori},
 title = {{KVM}: the {L}inux {V}irtual {M}achine {M}onitor},
 booktitle = {In Proceedings of the 2007 Ottawa Linux Symposium (OLS 2007)},
 year = {2007},
 month = jun,
 address = {Ottawa, ON, Canada}
}

@misc{hyperv,
  author = {Microsoft},
  title = {{Hyper-V Technology Overview}},
  year = {2016},
  month = nov,
  howpublished = {\url{https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/hyper-v-technology-overview}}
}

@InProceedings{NrOS,
  title={NrOS: Effective Replication and Sharing in an Operating System.},
  author={Bhardwaj, Ankit and Kulkarni, Chinmay and Achermann, Reto and Calciu, Irina and Kashyap, Sanidhya and Stutsman, Ryan and Tai, Amy and Zellweger, Gerd},
  booktitle={OSDI},
  pages={295--312},
  year={2021}
}

@InProceedings{Redleaf,
  title={Redleaf: Isolation and communication in a safe operating system},
  author={Narayanan, Vikram and Huang, Tianjiao and Detweiler, David and Appel, Dan and Li, Zhaofeng and Zellweger, Gerd and Burtsev, Anton},
  booktitle={Proceedings of the 14th USENIX Conference on Operating Systems Design and Implementation},
  pages={21--39},
  year={2020}
}

@InProceedings{TockOS,
  title={Multiprogramming a 64kb computer safely and efficiently},
  author={Levy, Amit and Campbell, Bradford and Ghena, Branden and Giffin, Daniel B and Pannuto, Pat and Dutta, Prabal and Levis, Philip},
  booktitle={Proceedings of the 26th Symposium on Operating Systems Principles},
  pages={234--251},
  year={2017}
}

@inproceedings {theseus,
author = {Kevin Boos and Namitha Liyanage and Ramla Ijaz and Lin Zhong},
title = {Theseus: an Experiment in Operating System Structure and State Management},
booktitle = {14th USENIX Symposium on Operating Systems Design and Implementation (OSDI 20)},
year = {2020},
isbn = {978-1-939133-19-9},
pages = {1--19},
url = {https://www.usenix.org/conference/osdi20/presentation/boos},
publisher = {USENIX Association},
month = nov,
}

@misc{DuVisor,
      title={DuVisor: a User-level Hypervisor Through Delegated Virtualization}, 
      author={Jiahao Chen and Dingji Li and Zeyu Mi and Yuxuan Liu and Binyu Zang and Haibing Guan and Haibo Chen},
      year={2022},
      eprint={2201.09652},
      archivePrefix={arXiv},
      primaryClass={cs.OS}
}

@inproceedings{RustyHermit,
author = {Sung, Mincheol and Olivier, Pierre and Lankes, Stefan and Ravindran, Binoy},
title = {Intra-Unikernel Isolation with Intel Memory Protection Keys},
year = {2020},
isbn = {9781450375542},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3381052.3381326},
doi = {10.1145/3381052.3381326},
abstract = {Unikernels are minimal, single-purpose virtual machines. This new operating system model promises numerous benefits within many application domains in terms of lightweightness, performance, and security. Although the isolation between unikernels is generally recognized as strong, there is no isolation within a unikernel itself. This is due to the use of a single, unprotected address space, a basic principle of unikernels that provide their lightweightness and performance benefits. In this paper, we propose a new design that brings memory isolation inside a unikernel instance while keeping a single address space. We leverage Intel's Memory Protection Key to do so without impacting the lightweightness and performance benefits of unikernels. We implement our isolation scheme within an existing unikernel written in Rust and use it to provide isolation between trusted and untrusted components: we isolate (1) safe kernel code from unsafe kernel code and (2) kernel code from user code. Evaluation shows that our system provides such isolation with very low performance overhead. Notably, the unikernel with our isolation exhibits only 0.6% slowdown on a set of macro-benchmarks.},
booktitle = {Proceedings of the 16th ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environments},
pages = {143–156},
numpages = {14},
keywords = {unikernels, memory safety, memory protection keys},
location = {Lausanne, Switzerland},
series = {VEE '20}
}

@INPROCEEDINGS{servo,
author = {Anderson, Brian and Bergstrom, Lars and Goregaokar, Manish and Matthews, Josh and McAllister, Keegan and Moffitt, Jack and Sapin, Simon},
booktitle = {2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C)},
title = {Engineering the Servo Web Browser Engine Using Rust},
year = {2016},
volume = {},
number = {},
pages = {81-89},
doi = {}
}

@inproceedings{rustsgx,
author = {Wang, Huibo and Wang, Pei and Ding, Yu and Sun, Mingshen and Jing, Yiming and Duan, Ran and Li, Long and Zhang, Yulong and Wei, Tao and Lin, Zhiqiang},
title = {Towards Memory Safe Enclave Programming with Rust-SGX},
year = {2019},
isbn = {9781450367479},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3319535.3354241},
doi = {10.1145/3319535.3354241},
abstract = {Intel Software Guard eXtension (SGX), a hardware supported trusted execution environment (TEE), is designed to protect security critical applications. However, it does not terminate traditional memory corruption vulnerabilities for the software running inside enclave, since enclave software is still developed with type unsafe languages such as C/C++. This paper presents RUST-SGX, an efficient and layered approach to exterminating memory corruption for software running inside SGX enclaves. The key idea is to enable the development of enclave programs with an efficient memory safe system language Rust with a RUST-SGX SDK by solving the key challenges of how to (1) make the SGX software memory safe and (2) meanwhile run as efficiently as with the SDK provided by Intel. We therefore propose to build RUST-SGX atop Intel SGX SDK, and tame unsafe components with formally proven memory safety. We have implemented RUST-SGX and tested with a series of benchmark programs. Our evaluation results show that RUST-SGX imposes little extra overhead (less than 5% with respect to the SGX specific features and services compared to software developed by Intel SGX SDK), and meanwhile have stronger memory safety.},
booktitle = {Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security},
pages = {2333–2350},
numpages = {18},
keywords = {memory safety, SGX, rust programming language, type system soundness},
location = {London, United Kingdom},
series = {CCS '19}
}

@inproceedings{rustee,
author = {Wan, Shengye and Sun, Mingshen and Sun, Kun and Zhang, Ning and He, Xu},
title = {RusTEE: Developing Memory-Safe ARM TrustZone Applications},
year = {2020},
isbn = {9781450388580},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3427228.3427262},
doi = {10.1145/3427228.3427262},
abstract = {In the past decade, Trusted Execution Environment (TEE) provided by ARM TrustZone is becoming one of the primary techniques for enhancing the security of mobile devices. The isolation enforced by TrustZone can protect the trusted applications running in the TEE against malicious software in the untrusted rich execution environment (REE). However, TrustZone cannot completely prevent vulnerabilities in trusted applications residing in the TEE, which can then be used to attack other trusted applications or even the trusted OS. Previously, a number of memory corruption vulnerabilities have been reported on different TAs, which are written in memory-unsafe languages like C. Recently, various memory-safe programming languages have emerged to mitigate the prevalent memory corruption bugs. In this paper, we propose RusTEE, a trusted application mechanism that leverages Rust, a newly emerged memory-safe language, to enhance the security of TAs. Though the high-level idea is quite straight-forwarding, we resolve several challenges on adopting Rust in mobile TEEs. Specifically, since Rust currently does not support any TrustZone-assisted TEE systems, we extend the existing Rust compiler for providing such support. Also, we apply comprehensive security mechanisms to resolve two security issues of trusted applications, namely, securely invoking high-privileged system services and securely communicating with untrusted REE. We implement a prototype of RusTEE as the trusted applications’ SDK, which supports both emulator and real hardware devices. The experiment shows that RusTEE can compile applications with close-to-C performance on the evaluated platforms.},
booktitle = {Annual Computer Security Applications Conference},
pages = {442–453},
numpages = {12},
keywords = {Rust, Trusted Applications, Memory-safety, TrustZone},
location = {Austin, USA},
series = {ACSAC '20}
}

@misc{bindgen,
  title={bindgen},
  author={bindgen maintainer},
  howpublished = {\url{https://github.com/rust-lang/rust-bindgen}},
  year = 2023,
}
